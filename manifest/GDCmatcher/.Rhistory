source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
DESeq2
library(DESeq2)
quit()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("installr")
update R
load("~/Box Sync/2019_Svendsen/Grouped_Raw_Counts/.RData")
plotMA(res,ylim=c(-2,2))
library(DESeq2)
plotMA(res,ylim=c(-2,2))
plotMA(resLFC, ylim=c(-2,2))
rownames(dds_de)
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
plotCounts(dds, gene="ENSG00000189223"(res$padj), intgroup="condition")
plotCounts(dds, ENSG00000189223(res$padj), intgroup="condition")
plotCounts(dds, ENSG00000125618(res$padj), intgroup="condition")
plotCounts(dds, "ENSG00000125618", intgroup="condition")
pax8 <- plotCounts(dds, "ENSG00000125618", intgroup="condition")
library("ggplot2")
ggplot(data, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
ggplot(pax8, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
pax8
pax8 <- plotCounts(dds, "ENSG00000125618", intgroup="condition",returnData = T)
pax8
ggplot(pax8, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
ggplot(pax8, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.5,height=0))
ovgp1 <- plotCounts(dds_de, "ENSG00000085465", intgroup="condition")
ovgp1
ovgp1 <- plotCounts(dds_de, "ENSG00000085465", intgroup="condition",returnData = T)
ovgp1
ggplot(ovgp1, aes(x=dex, y=count, color=cell)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
ggplot(ovgp1, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
tubb4 <- plotCounts(dds_de, "ENSG00000104833", intgroup="condition",returnData = T)
ggplot(tubb4, aes(x=condition, y=count, color=sampleFiles)) +
+     scale_y_log10() +
+     geom_point(position=position_jitter(width=.1,height=0))
ggplot(tubb4, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
cdh1 <- plotCounts(dds_de, "ENSG00000039068", intgroup="condition",returnData=T)
cdh1
ggplot(cdh1, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
pax8 <- plotCounts(dds_de, "ENSG00000125618", intgroup="condition",returnData = T)
ggplot(pax8, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
dds_de
dds
cd70 <- plotCounts(dds_de, "ENSG00000125726", intgroup="condition",returnData=T)
ggplot(cd70, aes(x=condition, y=count, color=sampleFiles)) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0))
dds_de
dds
ddsSE
res
library("genefilter")
library(pheatmap)
getwd()
getwd()
getwd()
setwd("~/Documents/github/tcga-utils/manifest/GDCmatcher")
library(data.table)
library(tidyverse)
library(caret)
library(splitstackshape)
library(data.table)
library(tidyverse)
library(caret)
install.packages('splitstackshape')
library(splitstackshape)
#Upload the GDC manifest (david) and kNN classes (peter)
david <- fread(file = "../gdc_manifest.2020-01-07.txt")
peter2 <- fread(file = "../peter_clusters_knn.tsv")
#Convert knn_clust column into a factor. Down sample the table so that each classes have equal samples
peter2$knn_clust <- paste("cluster", peter2$knn_clust, sep = " ") %>% as.factor()
peter2_down <- downSample(x = peter2, y = peter2$knn_clust)
#Create a column for both tables that contains TCGA patient ID, sample, and vial
david$linker <- substring(text = david$filename, first = 1, last = 16)
peter2_down$linker <- substring(text = peter2_down$sample_id, first = 1, last = 16)
#Merge the tables together based on the TCGA patient ID. Convert the sample_id to a factor. Remember, the kNN table has 1 patient per row (1 TCGA ID for patient). However, the GDC manifest may contain some cases where multiple images (each image contains its own ID) is linked to one single patient.
join <- david %>% left_join(., peter2_down, by = "linker") %>%
na.omit %>%
select(., -c(x_2d, y_2d, x_3d, y_3d, z_3d, clust, member_prob, Class))
join$sample_id <- as.factor(join$sample_id)
#Down sample the table. Each sample_id will be its own factor. Down sampling it makes sure that it each factor (sample_id) will have a single image (we are assuming that the least prevalent factor, the sample_id, will only have 1).
join_down <- downSample(x = join, y = join$sample_id) %>%
select(., -c(Class))
join_down_1000 <- stratified(join_down, "knn_clust", size = 84)
table(join_down_1000$knn_clust)
#write_csv(join_down_1000, "../sample_manifest.csv")
library(data.table)
library(tidyverse)
library(caret)
#install.packages('splitstackshape')
library(splitstackshape)
# david <- fread(file = "../gdc_manifest.2020-01-07.txt")
# peter <- fread(file = "../tcga_uuid.csv")
# peter2 <- fread(file = "../peter_clusters_knn.tsv")
#
# david$linker <- substring(text = david$filename, first = 1, last = 15)
# peter$linker <- substring(text = peter$tcga_barcode, first = 1, last = 15)
# peter2$linker <- substring(text = peter2$sample_id, first = 1, last = 15)
#
# join <- david  %>% left_join(., peter, by = "linker") %>%
#   na.omit()
# join2 <- david %>% left_join(., peter2, by = "linker") %>%
#   na.omit() %>%
#   select(., -c(x_2d, y_2d, x_3d, y_3d, z_3d, clust, member_prob))
# join2$knn_clust <- paste("cluster", join2$knn_clust, sep = " ") %>% as.factor()
#
# down_join2 <- downSample(x = join2, y = join2$knn_clust)
#
# write_csv(join, "../referenced_gdc_manifest.csv")
#Upload the GDC manifest (david) and kNN classes (peter)
david <- fread(file = "../gdc_manifest.2020-01-07.txt")
peter2 <- fread(file = "../peter_clusters_knn.tsv")
#Convert knn_clust column into a factor. Down sample the table so that each classes have equal samples
peter2$knn_clust <- paste("cluster", peter2$knn_clust, sep = " ") %>% as.factor()
peter2_down <- downSample(x = peter2, y = peter2$knn_clust)
#Create a column for both tables that contains TCGA patient ID, sample, and vial
david$linker <- substring(text = david$filename, first = 1, last = 16)
peter2_down$linker <- substring(text = peter2_down$sample_id, first = 1, last = 16)
#Merge the tables together based on the TCGA patient ID. Convert the sample_id to a factor. Remember, the kNN table has 1 patient per row (1 TCGA ID for patient). However, the GDC manifest may contain some cases where multiple images (each image contains its own ID) is linked to one single patient.
join <- david %>% left_join(., peter2_down, by = "linker") %>%
na.omit %>%
select(., -c(x_2d, y_2d, x_3d, y_3d, z_3d, clust, member_prob, Class))
join$sample_id <- as.factor(join$sample_id)
#Down sample the table. Each sample_id will be its own factor. Down sampling it makes sure that it each factor (sample_id) will have a single image (we are assuming that the least prevalent factor, the sample_id, will only have 1).
join_down <- downSample(x = join, y = join$sample_id) %>%
select(., -c(Class))
join_down_1000 <- stratified(join_down, "knn_clust", size = 84)
table(join_down_1000$knn_clust)
#write_csv(join_down_1000, "../sample_manifest.csv")
downSample
library(caret)
#install.packages('splitstackshape')
install.packages('caret')
library(data.table)
library(tidyverse)
library(caret)
#install.packages('splitstackshape')
library(splitstackshape)
#Upload the GDC manifest (david) and kNN classes (peter)
david <- fread(file = "../gdc_manifest.2020-01-07.txt")
peter2 <- fread(file = "../peter_clusters_knn.tsv")
#Convert knn_clust column into a factor. Down sample the table so that each classes have equal samples
peter2$knn_clust <- paste("cluster", peter2$knn_clust, sep = " ") %>% as.factor()
peter2_down <- downSample(x = peter2, y = peter2$knn_clust)
#Create a column for both tables that contains TCGA patient ID, sample, and vial
david$linker <- substring(text = david$filename, first = 1, last = 16)
peter2_down$linker <- substring(text = peter2_down$sample_id, first = 1, last = 16)
#Merge the tables together based on the TCGA patient ID. Convert the sample_id to a factor. Remember, the kNN table has 1 patient per row (1 TCGA ID for patient). However, the GDC manifest may contain some cases where multiple images (each image contains its own ID) is linked to one single patient.
join <- david %>% left_join(., peter2_down, by = "linker") %>%
na.omit %>%
select(., -c(x_2d, y_2d, x_3d, y_3d, z_3d, clust, member_prob, Class))
join$sample_id <- as.factor(join$sample_id)
#Down sample the table. Each sample_id will be its own factor. Down sampling it makes sure that it each factor (sample_id) will have a single image (we are assuming that the least prevalent factor, the sample_id, will only have 1).
join_down <- downSample(x = join, y = join$sample_id) %>%
select(., -c(Class))
join_down_1000 <- stratified(join_down, "knn_clust", size = 84)
table(join_down_1000$knn_clust)
#write_csv(join_down_1000, "../sample_manifest.csv")
